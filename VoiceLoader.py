from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)
from gtts import gTTS
import io

BOT_TOKEN = '7250396748:AAEmd-RhWClqO-VtCrSbQDX8vihfpZJaHbc'

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤
user_voice_choice = {}

# –î–æ—Å—Ç—É–ø–Ω—ã–µ "–≥–æ–ª–æ—Å–∞" (–Ω–∞ –¥–µ–ª–µ ‚Äî –∞–∫—Ü–µ–Ω—Ç—ã/—è–∑—ã–∫–∏)
voice_options = {
    'ru': '–†—É—Å—Å–∫–∏–π',
    'en': '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π (–°–®–ê)',
    'en-uk': '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π (–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è)',
    'en-au': '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π (–ê–≤—Å—Ç—Ä–∞–ª–∏—è)',
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(name, callback_data=code)]
        for code, name in voice_options.items()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ! –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç, –∏ —è —Å–¥–µ–ª–∞—é –∏–∑ –Ω–µ–≥–æ –∞—É–¥–∏–æ.\n"
        "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å üëá",
        reply_markup=reply_markup
    )

async def choose_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    voice_code = query.data
    user_id = query.from_user.id
    user_voice_choice[user_id] = voice_code

    await query.edit_message_text(
        text=f"‚úÖ –ì–æ–ª–æ—Å ¬´{voice_options[voice_code]}¬ª –≤—ã–±—Ä–∞–Ω.\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏:"
    )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text

    if user_id not in user_voice_choice:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å, –∏—Å–ø–æ–ª—å–∑—É—è /start.")
        return

    lang = user_voice_choice[user_id]

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π: gTTS –Ω–µ –∑–Ω–∞–µ—Ç 'en-uk' –∏ 'en-au' ‚Äî –ø–æ–¥–º–µ–Ω–∏–º –Ω–∞ 'en'
    tts_lang = 'en' if lang.startswith('en') else lang

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ
    tts = gTTS(text=text, lang=tts_lang)
    audio = io.BytesIO()
    tts.write_to_fp(audio)
    audio.seek(0)

    await update.message.reply_voice(voice=audio, caption="üéß –í–æ—Ç –≤–∞—à–µ –∞—É–¥–∏–æ!")

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(choose_voice))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_text))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == '__main__':
    main()
